plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = project.mod_version
group = 'com.mikitellurium.turtlechargingstation'
archivesBaseName = 'turtlechargingstation'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {

    //mappings channel: 'official', version: "${mc_version}"
    mappings channel: 'parchment', version: '2023.06.26-1.20.1'


    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'turtlechargingstation'

            // Mixin fix
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                turtlechargingstation {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'turtlechargingstation'

            // Mixin fix
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                turtlechargingstation {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'turtlechargingstation'

            mods {
                turtlechargingstation {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Mixin fix
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--mod', 'turtlechargingstation', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                turtlechargingstation {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        url "https://maven.shedaniel.me/"
    }
    maven {
        // CC:Tweaked
        name = "Squiddev maven cct"
        url = 'https://squiddev.cc/maven/'
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        forRepositories(fg.repository)
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "Curse Maven"
        url = "https://cursemaven.com"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    implementation fg.deobf("cc.tweaked:cc-tweaked-${minecraft_version}-forge:${cc_version}")

    runtimeOnly fg.deobf("maven.modrinth:cofh-core:${thermal_version}")
    runtimeOnly fg.deobf("maven.modrinth:thermal-expansion:${thermal_version}")
    runtimeOnly fg.deobf("maven.modrinth:thermal-foundation:${thermal_version}")

    runtimeOnly fg.deobf("maven.modrinth:mekanism:${mekanism_version}") // Mekanism: Core
    runtimeOnly fg.deobf("maven.modrinth:mekanism-additions:${mekanism_version}") // Mekanism: Additions
    runtimeOnly fg.deobf("maven.modrinth:mekanism-generators:${mekanism_version}") // Mekanism: Generators
    runtimeOnly fg.deobf("maven.modrinth:mekanism-tools:${mekanism_version}") // Mekanism: Tools

    runtimeOnly fg.deobf("maven.modrinth:powah:${powah_version}-forge")

    implementation fg.deobf("maven.modrinth:architectury-api:${architectury_version}+forge")

    implementation fg.deobf("maven.modrinth:cloth-config:${cloth_config_version}+forge")

    implementation fg.deobf("curse.maven:weather2-237746:5244118")
    implementation fg.deobf("curse.maven:coroutil-237749:5096038")
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            mod_version            : mod_version,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

jar {
    version = "${project.version}-${minecraft_version}-forge"

    manifest {
        attributes([
                "Specification-Title"     : "Turtle Charging Station",
                "Specification-Vendor"    : "turtlechargingstation",
                "Specification-Version"   : "${mod_version}",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Miki Tellurium",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
