plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = project.mod_version
group = 'com.mikitellurium.turtlechargingstation'
archivesBaseName = 'turtlechargingstation'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {

    mappings channel: 'official', version: "${mc_version}"
    //mappings channel: 'parchment', version: '2022.11.27-1.19.2'


    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'turtlechargingstation'

            // Mixin fix
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                turtlechargingstation {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'turtlechargingstation'

            // Mixin fix
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                turtlechargingstation {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'turtlechargingstation'

            mods {
                turtlechargingstation {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Mixin fix
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--mod', 'turtlechargingstation', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                turtlechargingstation {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        // JEI
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // JEI mirror (for fallback)
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        // The One Probe
        // Thermal Expansion
        // Powah
        // Architectury API
        // Cloth config
        url = 'https://cursemaven.com'
    }
    repositories {
        // Mekanism
        maven { url 'https://modmaven.dev/' }
    }
    maven {
        // CC:Tweaked
        name = "Squiddev maven cct"
        url = 'https://squiddev.cc/maven/'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")  // at runtime, use the full JEI jar

    implementation fg.deobf(project.dependencies.create("mcjty.theoneprobe:theoneprobe:${top_version}") {
        transitive = false
    })

//    implementation fg.deobf("curse.maven:cofh_core-69162:4385216")
//    implementation fg.deobf("curse.maven:thermal_expansion-69163:4382371")
//    implementation fg.deobf("curse.maven:thermal_foundation-222880:4382373")
//
//    compileOnly "mekanism:Mekanism:${mekanism_version}:api"
//    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}")// core
//    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:additions")// Mekanism: Additions
//    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:generators")// Mekanism: Generators
//    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:tools")// Mekanism: Tools

    implementation fg.deobf("cc.tweaked:cc-tweaked-${mc_version}-forge:${cc_version}")

//    implementation fg.deobf("curse.maven:Powah-633483:4489347")
//
//    implementation fg.deobf("curse.maven:architectury-419699:4476084")
//
//    implementation fg.deobf("curse.maven:cloth-config-348521:3972423")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "Turtle Charging Station",
                "Specification-Vendor"    : "turtlechargingstation",
                "Specification-Version"   : "${mod_version}",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Miki Tellurium",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
